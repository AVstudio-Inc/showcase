import{v as g,w as v,a as o,K as f}from"./editorApp-BQHhAWNR.js";import{a as m,r as p}from"./index-BWO8qd00.js";const V=g((i,a)=>({calculatedVariables:[],setInitialVariablesArray:n=>i(()=>({calculatedVariables:n})),setVariableNewValue:({name:n,currentValue:r})=>{console.log("setVariableNewValue",n,r);const t=structuredClone(a().calculatedVariables)??[];if(n===void 0||r===void 0){console.log("Variable name or currentValue is undefined");return}const s=t.findIndex(l=>l.name===n);if(s<0){console.log("Variable not found, update error");return}let e;if(t[s].currentValue!==void 0?e=t[s].currentValue:e=t[s].defaultValue,e=t[s].defaultValue,t[s].type==="boolean")switch(r){case"true":case!0:e=!0;break;case"false":case!1:e=!1;break;case"toggle":e=!e;break}else e=r;return t[s].currentValue!==e&&(t[s]={...t[s],currentValue:e}),i(()=>({calculatedVariables:t}))}}),v.isEqual);async function k({updatedVariable:i,projectId:a,pageId:n}){var t;const r=(t=o.getState().workingProject)==null?void 0:t.attributes.variables;return new Promise(async function(s,e){let l=structuredClone(r);if(!l)return e("Variables are empty"),null;const u=l==null?void 0:l.findIndex(c=>c.name===i.name);if(u<0)return e("No variable found by index"),null;if(l[u]=i,a)return f({projectId:a,inputData:{variables:l}}).then(()=>s("Ok")).catch(c=>{var b,d;return((d=(b=c.response.data)==null?void 0:b.error)==null?void 0:d.name)==="ValidationError"&&m.error("Name must be unique"),e(c)});e("No projectId")})}async function P({variableName:i,projectId:a,pageId:n}){var t;const r=(t=o.getState().workingProject)==null?void 0:t.attributes.variables;return new Promise(async function(s,e){let l=structuredClone(r);if(!l)return e("variables are empty"),null;n&&n!==void 0?l=l.filter(u=>u.pageId!==n||u.name!==i):l=l.filter(u=>u.name!==i),a?f({projectId:a,inputData:{variables:l}}).then(()=>{s("Ok")}).catch(u=>e(u)):e("No projectId")})}async function h({projectId:i,pageId:a}){var r;const n=(r=o.getState().workingProject)==null?void 0:r.attributes.variables;return new Promise(async function(t,s){let e=structuredClone(n);if(!e)return s("variables are empty"),null;e=e.filter(l=>l.pageId!==a),i?f({projectId:i,inputData:{variables:e}}).catch(l=>s(l)):s("No projectId")})}async function N({newVariable:i,projectId:a}){const{workingProject:n}=o.getState();return new Promise(async function(r,t){if(!a){t("No projectId");return}if(!n){t("No workingProject");return}const s=n.attributes.variables;let e=structuredClone(s)||[];e=[...e,i],console.log(e),f({projectId:a,inputData:{variables:e}}).then(()=>r("Ok")).catch(l=>t(l))})}function x(i){var r;const a=(r=o.getState().workingProject)==null?void 0:r.attributes.variables;return a==null?void 0:a.find(t=>t.name===i)}function S(i){const a=V.getState().calculatedVariables;return a==null?void 0:a.find(r=>r.name===i)}function C(i){const a=V(e=>e.calculatedVariables);let n=p.useMemo(()=>a==null?void 0:a.find(e=>e.name===i),[a,i]);if(n===void 0)return;const{currentValue:r,defaultValue:t}=n;return{calculatedValue:r===void 0||r===""?t:r,targetVariable:n}}export{C as a,h as b,N as c,P as d,k as e,x as f,S as g,V as u};
