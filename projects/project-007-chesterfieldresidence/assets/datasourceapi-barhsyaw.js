import{i as q,j as z,a as s,b0 as F}from"./editorApp-BQHhAWNR.js";import{u as G,c as R,s as Q}from"./datasourceTools-CeSl9gC_.js";import{a as j}from"./index-BWO8qd00.js";const _=async(c,e)=>{const o={data:{project:c,...e}};await q.post("/api/datasources",o,{headers:z()}).then(t=>{const{workingProject:u,updateProjectWithHistory:h}=s.getState();if(!u)return;const f=u.attributes.datasources,a=t.data.data;return h({datasources:{data:[...f.data,a]}},!1)}).then(()=>{j.success("New datasource added")}).catch(t=>{console.log("An error occured during datasource creation:",t.response),j.error("Error adding new datasource")})},M=async c=>{await q.delete(`/api/datasources/${c}`,{headers:z()}).then(()=>{const{workingProject:e,updateProjectWithHistory:o}=s.getState();if(!e)return;let t=e.attributes.datasources.data;return t=t.filter(u=>u.id!==c),o({datasources:{data:t}},!1)}).then(()=>{j.success("Datasource deleted")}).catch(e=>{console.log("An error occured during datasource removing:",e.response),j.error("Error deleting datasource")})},ee=async(c,e)=>await q.put(`/api/datasources/${e}`,{data:c},{headers:z()}).then(o=>{const{workingProject:t,updateProjectWithHistory:u}=s.getState();if(!t)return;let h=structuredClone(t.attributes.datasources.data);return h.map(f=>(f.id===e&&(f.attributes=o.data.data.attributes),f)),u({datasources:{data:h}},!1)}).then(()=>{j.success("Datasource updated")}).catch(o=>{console.log("An error occured during datasource update:",o.response),j.error("Error updating datasource")}),te=async()=>{var a,K,U,v,W,E,P,L,$,i,k,D;const c=(a=s.getState().workingProject)==null?void 0:a.attributes.datasources,e=(U=(K=s.getState().workingProject)==null?void 0:K.attributes)==null?void 0:U.modificators,{setInitialDatasourceData:o}=G.getState(),t=((E=(W=(v=s.getState().workingProject)==null?void 0:v.attributes)==null?void 0:W.datasetOptions)==null?void 0:E.hostname)??"",u=(($=(L=(P=s.getState().workingProject)==null?void 0:P.attributes)==null?void 0:L.datasetOptions)==null?void 0:$.headerKey)??"",h=((D=(k=(i=s.getState().workingProject)==null?void 0:i.attributes)==null?void 0:k.datasetOptions)==null?void 0:D.headerValue)??"";return(async S=>{const l=[],V=(r,g)=>{if(g&&g!==null&&e&&e!==void 0&&e.data.length>0&&e.data.find(y=>y.id===g))return R([r],String(g),e==null?void 0:e.data)},N=((S==null?void 0:S.data)??[]).map(async r=>{var I,O;const{attributes:{production:{storageType:g,sourceLink:H,sourceObject:y,headerKey:T,headerValue:B,modificatorId:m,useBaseUrl:C,isImagePreloadSource:x}}}=r;let n;if(g==="local")try{n=JSON.parse(y),m&&e&&(n=V(n,m)),l.push({id:r.id,value:n,uid:r.attributes.uid,isImagePreloadSource:!!((I=r.attributes.production)!=null&&I.isImagePreloadSource)})}catch(p){console.log("Prefetcher: error parsing datasource",r.id,p)}else{let p=Q(H);C&&(p=t+p);let d=T??u,A=B??h;const J=d&&A?{headers:{[d]:A}}:{};try{const b=await F.get(p,J);b.status!==200?console.log("Prefetcher: error fetching datasource",r.id,b.status):(m&&e?n=V(b.data,m):n=b.data,l.push({id:r.id,value:n,uid:r.attributes.uid,hashedUrl:p,isImagePreloadSource:!!((O=r.attributes.production)!=null&&O.isImagePreloadSource)}))}catch(b){console.log("Prefetcher: error fetching datasource",r.id,b)}}});return await Promise.allSettled(N),Array.isArray(l)&&l.length>0&&o(l),l})(c)},ae=async c=>{var k,D,S,l,V,N,r,g,H,y,T,B,m,C,x,n,I,O,p;const e=((l=(S=(D=(k=s.getState().workingProject)==null?void 0:k.attributes)==null?void 0:D.datasources)==null?void 0:S.data)==null?void 0:l.filter(d=>d.attributes.name===c))??[],{updateOrCreateDatasourceData:o}=G.getState();if(e.length===0)return null;const t=(N=(V=s.getState().workingProject)==null?void 0:V.attributes)==null?void 0:N.modificators,u=((H=(g=(r=s.getState().workingProject)==null?void 0:r.attributes)==null?void 0:g.datasetOptions)==null?void 0:H.hostname)??"",h=((B=(T=(y=s.getState().workingProject)==null?void 0:y.attributes)==null?void 0:T.datasetOptions)==null?void 0:B.headerKey)??"",f=((x=(C=(m=s.getState().workingProject)==null?void 0:m.attributes)==null?void 0:C.datasetOptions)==null?void 0:x.headerValue)??"",a=e[0],{attributes:{production:{storageType:K,sourceLink:U,sourceObject:v,headerKey:W,headerValue:E,modificatorId:P,useBaseUrl:L,isImagePreloadSource:$}}}=a;let i;if(K==="local")try{return i=JSON.parse(v),P&&t&&(i=R([i],String(P),t==null?void 0:t.data)),o({id:a.id,value:i,uid:a.attributes.uid,isImagePreloadSource:!!((n=a.attributes.production)!=null&&n.isImagePreloadSource)}),{id:a.id,value:i,uid:a.attributes.uid,isImagePreloadSource:!!((I=a.attributes.production)!=null&&I.isImagePreloadSource)}}catch(d){console.log("Prefetcher: error parsing datasource",a.id,d)}else{let d=Q(U);L&&(d=u+d);let A=W??h,J=E??f;const b=A&&J?{headers:{[A]:J}}:{};try{const w=await F.get(d,b);if(w.status!==200)console.log("Prefetcher: error fetching datasource",a.id,w.status);else return P&&t?i=R([w.data],String(P),t==null?void 0:t.data):i=w.data,o({id:a.id,value:i,uid:a.attributes.uid,hashedUrl:d,isImagePreloadSource:!!((O=a.attributes.production)!=null&&O.isImagePreloadSource)}),{id:a.id,value:i,uid:a.attributes.uid,hashedUrl:d,isImagePreloadSource:!!((p=a.attributes.production)!=null&&p.isImagePreloadSource)}}catch(w){console.log("Prefetcher: error fetching datasource",a.id,w)}}return null};export{ae as a,_ as c,M as d,te as g,ee as u};
