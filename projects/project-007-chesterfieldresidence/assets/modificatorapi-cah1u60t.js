import{i as d,j as u,a as f}from"./editorApp-BQHhAWNR.js";import{a as i}from"./index-BWO8qd00.js";const g=async(e,a)=>{const t={data:{project:e,...a}};await d.post("/api/modificators",t,{headers:u()}).then(r=>{const{workingProject:o,updateProjectWithHistory:n}=f.getState();if(!o)return;let c=structuredClone(o.attributes.modificators.data);return c.push(r.data.data),n({modificators:{data:c}},!1)}).then(()=>{i.success("Function created")}).catch(r=>{console.log("An error occured during function creation:",r),i.error("Error adding new function")})},m=async e=>{await d.delete(`/api/modificators/${e}`,{headers:u()}).then(()=>{const{workingProject:a,updateProjectWithHistory:t}=f.getState();if(!a)return;let r=a.attributes.modificators.data;return r=r.filter(o=>o.id!==e),t({modificators:{data:r}},!1)}).then(()=>{i.success("Function deleted")}).catch(a=>{console.log("An error occured during function removing:",a.response),i.error("Error deleting function")})},h=async(e,a)=>await d.put(`/api/modificators/${a}`,{data:e},{headers:u()}).then(t=>{var c;const{workingProject:r,updateProjectWithHistory:o}=f.getState();if(!r||!((c=t==null?void 0:t.data)!=null&&c.data))return;let n=structuredClone(r.attributes.modificators.data);return n.map(s=>(s.id===a&&(s.attributes=t.data.data.attributes),s)),o({modificators:{data:n}},!1)}).then(()=>{i.success("Function updated")}).catch(t=>{console.log("An error occured during function update:",t.response),i.error("Error updating function")});export{g as c,m as d,h as u};
